/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define HDALTE 1

#define NAV 2
#define NUM 3
#define MEDIA 4
#define FUNC 5
#define ZMKL 6

&caps_word{
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&sk {
    release-after-ms = <1000>;
};

/ {
    behaviors {
    
        //Allow for repeat space and backspace 
        //after a double-tap
        tlt: thumb_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
        
        //Allow for repeat letters, enable sticky mods
        //for one handed copy pastes mainly
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&sk>, <&kp>;
        };
        
        hmi: homerow_mods_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_INDEX";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            bindings = <&sk>, <&kp>;
        };

        //Increase tapping term for pinky home position 
        //as they seem most likely to accidentally trigger
        hmp: homerow_mods_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };    
    };

        /*
        macros {
both_paren: both_paren {
    label = "ZM_both_paren";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
        };
    };
    */
    /* KEY POSITIONS
          -- from https://github.com/caksoylar/zmk-config/blob/main/config/combos.dtsi
          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
                      ╰────────╯ ╰────────╯
    */
    combos {
        compatible = "zmk,combos";

        //Thumb combos
        //Left thumb
        combo_enter {
            key-positions = <30 24>;
            bindings = <&lt ZMKL ENTER>;
        };
        
        //Right thumb
        combo_esc {
            key-positions = <25 33>;
            bindings = <&lt ZMKL ESC>;
        };
        //combo_hdalte {
        //    key-positions = <25 32 33>;
        //    bindings = <&tog HDALTE>;
        //};

        //combo_hdgold {
        //    key-positions = <24 30 31>; bindings = <&tog QWERTY>;
        //};

        //Left-hand combos
        combo_lcaps_word {
            key-positions = <13 14>;
            bindings = <&caps_word>;
        };
            
        combo_lbrace {
            key-positions = <1 11>;
            bindings = <&kp LEFT_BRACE>;
        };
        
        combo_lbracket {
            key-positions = <2 12>;
            bindings = <&kp LEFT_BRACKET>;
        };
        
        combo_lparen {
            key-positions = <3 13>;
            bindings = <&kp LPAR>;
        };
        
        combo_lthan {
            key-positions = <12 22>;
            bindings = <&kp LESS_THAN>;
        };
        
        combo_slash {
            key-positions = <13 23>;
            bindings = <&kp SLASH>;
        };
        
        
        //Right-hand combos
        combo_rcaps_word {
            key-positions = <15 16>;
            bindings = <&caps_word>;
        };
        
        combo_rbrace {
            key-positions = <8 18>;
            bindings = <&kp RIGHT_BRACE>;
        };
        
        combo_rbracket {
            key-positions = <7 17>;
            bindings = <&kp RIGHT_BRACKET>;
        };
        
        combo_rparen {
            key-positions = <6 16>;
            bindings = <&kp RIGHT_PARENTHESIS>;
        };
        
        combo_gthan {
            key-positions = <17 27>;
            bindings = <&kp GREATER_THAN>;
        };
        
        combo_bslash {
            key-positions = <16 26>;
            bindings = <&kp BACKSLASH>;
        };

        //Build a semi-colon!
        combo_semi {
    key-positions = <27 28>;
    bindings = <&kp SEMI>;
                layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
                &kp Q           &kp W           &kp E           &kp R           &kp T                     &kp Y           &kp U           &kp I           &kp O           &kp P 
                &hmp LGUI A        &hm LALT S      &hm LCTRL D     &hmi LSHIFT F    &kp G                        &kp H           &hmi RSHIFT J    &hm RCTRL K     &hm RALT L      &hmp RGUI QUOT
                &kp Z           &kp X           &kp C           &kp V           &kp B            &kp N           &kp M           &kp CMMA        &kp DOT         &kp QUESTION
                                                                &lt FUNC TAB    &tlt NAV SPC              &tlt NUM BSPC   &lt MEDIA DEL
            >;
        };

        hdalte_layer {
            bindings = <
                &none           &kp G           &kp M           &kp F           &kp V                     &kp QUOT        &kp U           &kp K           &kp J           &none 
                &hmp LGUI R        &hm LALT S      &hm LCTRL N     &hm LSHIFT T    &kp P                        &kp Y           &hm RSHIFT A    &hm RCTRL O     &hm RALT I      &hmp RGUI H
                &kp X           &kp C           &kp L           &kp D           &kp B            &kp MINUS       &kp W           &kp SLASH       &kp CMMA        &kp DOT
                                                                &lt FUNC TAB    &tlt NAV SPC              &tlt NUM E      &lt MEDIA BSPC
            >;
        };
        

           nav_layer {
            bindings = <
                &trans          &trans          &trans          &trans          &trans               &none           &none           &none           &none           &none 
                &trans          &trans          &trans          &trans          &trans             &kp LEFT_ARROW  &kp UP_ARROW    &kp DOWN_ARROW  &kp RIGHT_ARROW &none
                &trans          &trans     &trans          &trans          &trans             &kp HOME        &kp PG_UP       &kp PG_DN       &kp END            &kp INSERT
                                                                &trans          &trans                     &trans           &trans 
        >;
        };
        
        num_layer {
            bindings = <
                &kp GRAVE        &kp N7            &kp N8            &kp N9            &none            &trans          &trans          &trans        &trans        &trans 
                &kp N0           &kp N4            &kp N5            &kp N6            &none            &trans          &trans          &trans        &trans        &trans
                &none            &kp N1            &kp N2            &kp N3            &kp EQUAL                &trans          &trans          &trans        &trans        &trans
                                                                &kp N0            &kp MINUS                  &trans            &trans 
        >;
        };    
        
        media_layer {
            bindings = <
                &none              &none            &none           &none             &none                  &trans          &trans          &trans        &trans        &trans
                &kp C_PREV      &kp C_VOL_DN    &kp C_VOL_UP    &kp C_NEXT        &none          &trans          &trans          &trans        &trans        &trans 
                &none           &none           &none           &none             &none                   &trans          &trans          &trans        &trans        &trans   
                                                                &kp C_PLAY_PAUSE  &kp C_MUTE              &trans          &trans 
        >;
        };    
        
        func_layer {
            bindings = <
                &trans            &trans            &trans            &trans        &trans            &kp PSCRN           &kp F9      &kp F10       &kp F11       &kp F12 
                &trans            &trans            &trans            &trans        &trans             &kp SLCK            &kp F5      &kp F6        &kp F7        &kp F8
                &trans            &trans            &trans            &trans        &trans            &kp PAUSE_BREAK     &kp F1      &kp F2        &kp F3        &kp F4
                                                                &trans        &trans                      &trans              &kp K_APP 
        >;
        };

        zmk_layer {
            bindings = <
                &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &none           &bt BT_CLR              &trans          &trans          &trans        &trans        &trans
                &bootloader     &sys_reset            &none            &none              &none              &trans          &trans          &trans        &reset        &bootloader 
                &none           &none           &none           &none           &none                   &trans          &trans          &trans        &trans        &trans   
                                                                &trans          &trans                  &trans          &trans 
        >;
        };
    };
};
